package al.disjointset

import al.util.createMatrix
import kotlin.test.Test
import kotlin.test.assertEquals

class MinMalwareSpreadTest {

    @Test
    fun test1() {
        val graph =
            createMatrix("[[1,0,0,0,1,0,0,0,0,0,1],[0,1,0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0,0,0],[0,1,0,1,0,1,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,1,0,0,1,1,0],[0,0,0,0,0,0,1,1,0,0,0],[0,0,1,0,0,0,1,1,0,0,0],[0,0,0,0,0,1,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,1,0],[1,0,0,0,0,0,0,0,0,0,1]]")
        val initial = intArrayOf(7, 8, 6, 2, 3)
        val result = MinMalwareSpread().minMalwareSpread(graph, initial)
        assertEquals(2, result)
    }

    @Test
    fun test2() {
        val graph =
            createMatrix("[[1,0,0],[0,1,0],[0,0,1]]")
        val initial = intArrayOf(0, 2)
        val result = MinMalwareSpread().minMalwareSpread(graph, initial)
        assertEquals(0, result)
    }

    @Test
    fun test3() {
        val graph =
            createMatrix("[[1,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,1]]")
        val initial = intArrayOf(1, 3)
        val result = MinMalwareSpread().minMalwareSpread(graph, initial)
        assertEquals(1, result)
    }

    @Test
    fun test4() {
        val graph =
            createMatrix("[[1,1,0],[1,1,0],[0,0,1]]")
        val initial = intArrayOf(0, 1, 2)
        val result = MinMalwareSpread().minMalwareSpread(graph, initial)
        assertEquals(2, result)
    }

    @Test
    fun test5() {
        val graph =
            createMatrix("[[1,1,0],[1,1,0],[0,0,1]]")
        val initial = intArrayOf(0, 1)
        val result = MinMalwareSpread().minMalwareSpread(graph, initial)
        assertEquals(0, result)
    }
}